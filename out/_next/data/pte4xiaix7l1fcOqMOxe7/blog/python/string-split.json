{"pageProps":{"post":{"title":"Python split() - Ejemplo de división de cadenas","date":"2022-06-19T00:00:00.000Z","tags":["python","split"],"lastmod":"2022-06-19T00:00:00.000Z","draft":false,"summary":"El método split() en Python divide los caracteres de una cadena en elementos separados en una lista.","images":["/static/images/blog/styles-react.jpg"],"authors":["fabiankaraben"],"body":{"raw":"\n![tailwind-nextjs-banner](/../static/images/blog/styles-react.jpg)\n\nEl método `split()` en Python divide los caracteres de una cadena en elementos separados en una lista. \n\nEn este tutorial, repasaremos algunos ejemplos para ayudarte a aprender a usar el método `split()`. \n\nComenzaremos desde la sintaxis y luego veremos cómo podemos modificar la lista devuelta usando los parámetros del método `split()`.\n\n## Sintaxis del método split() en Python\n\nEl método `split()` toma dos parámetros. Así es como se ve la sintaxis:\n\n```python\nstr.split(separator, maxsplit)\n```\n\nLos parámetros anteriores son `separator` y `maxsplit`. Ambos parámetros son opcionales, pero analicemos lo que hacen. \n\n`separator` especifica el carácter en el que se produce la división. Si no se especifica, los espacios en blanco \nse utilizarán como el carácter predeterminado donde se produce la división. Comprenderás esto mejor en los \nejemplos de las próximas secciones. \n\n`maxsplit` especifica el número máximo de divisiones. El valor predeterminado es `-1`, lo que permite un número \ncontinuo de divisiones. Este argumento también es opcional.\n\n## Cómo usar el método split() sin parámetros\n\nEn esta sección, veremos algunos ejemplos de división de cadenas usando el método `split()` sin pasar ningún parámetro.\n\n```python\nmyString = \"Python es un lenguaje de programación\"\n\nprint(myString.split())\n\n# ['Python', 'es', 'un', 'lenguaje', 'de', 'programación']\n```\n\nEn el código anterior, creamos una cadena llamada `myString` con cinco caracteres que componen \nla cadena: \"Python es un lenguaje de programación\". \n\nLuego usamos el método `split()` en nuestra cadena usando la notación de puntos. \n\nCuando se imprimía en la consola, cada carácter de la cadena se convertía en un elemento separado en un \ntipo de datos de lista: `['Python', 'es', 'un', 'lenguaje', 'de', 'programación']`. \n\nEl método `split()` puede separar cada palabra porque, de forma predeterminada, los espacios en blanco \nindican el punto de división de cada carácter (consulta el parámetro `separator` en la sección anterior).\n\n## Cómo usar el método split() con parámetros\n\nEn esta sección, entenderemos cómo usar los parámetros del método `split()` con ejemplos.\n\n```python\nmyString = \"Hello World!, if you're reading this, you're awesome\"\n\nprint(myString.split(\", \"))\n\n# ['Hello World!', \"if you're reading this\", \"you're awesome\"]\n```\n\nEn el ejemplo anterior, pasamos una coma (`,`) como separador: `myString.split(\", \")`. \n\nEntonces, en lugar de dividir los caracteres después de cada espacio en blanco, los caracteres solo se dividirán \ncuando aparezca una coma: `['Hello World!', \"if you're reading this\", \"you're awesome\"]`. Esto significa que los caracteres \nque aparecen antes de una coma se agruparán. \n\nEn el siguiente ejemplo, trabajaremos con el segundo parámetro: `maxsplit`.\n\n```python\nmyString = \"Hello World!, if you're reading this, you're awesome\"\n\nprint(myString.split(\", \", 0))\n\n# [\"Hello World!, if you're reading this, you're awesome\"]\n```\n\nHemos agregado un valor `maxsplit` de `0` en el código anterior. Esto controla cómo se divide la cadena. `0` implica `1`, \npor lo que los caracteres se devuelven como un elemento en una lista: `[\"Hello World!, if you're reading this, you're awesome\"]`\n\nCambiemos el número y veamos qué pasa.\n\n```python\nmyString = \"Hello World!, if you're reading this, you're awesome\"\n\nprint(myString.split(\", \", 1))\n\n# ['Hello World!', \"if you're reading this, you're awesome\"]\n```\n\nAhora que hemos cambiado el número a `1`, los personajes se dividen en dos elementos en la lista: `'Hello World!'` \ny `\"if you're reading this, you're awesome\"`. \n\nSi se omite el valor `maxsplit`, se establecerá en `-1` de forma predeterminada. Este valor negativo permite que los \nmétodos `split()` dividan cada carácter continuamente en elementos separados hasta que no queden más caracteres. \n\nSi hay un `separator` específico, la división se realizará con respecto a ese valor; de lo contrario, \nse utilizarán espacios en blanco.\n\n## Conclusión\n\nEn este artículo, hablamos sobre el método `split()` en Python que divide los caracteres en una cadena y los devuelve \ncomo elementos en una lista. \n\nVimos la sintaxis del método `split()` y los dos parámetros proporcionados por defecto: los parámetros `separator` y `maxsplit`. \n\nTambién vimos algunos ejemplos divididos en dos secciones. La primera sección mostró cómo usar el método `split()` sin parámetros, \nmientras que la segunda mostró cómo usaríamos los parámetros del método para lograr diferentes resultados.\n","code":"var Component=(()=>{var t=Object.create;var l=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var g=(a,s)=>()=>(s||a((s={exports:{}}).exports,s),s.exports),N=(a,s)=>{for(var o in s)l(a,o,{get:s[o],enumerable:!0})},i=(a,s,o,n)=>{if(s&&typeof s==\"object\"||typeof s==\"function\")for(let c of m(s))!u.call(a,c)&&c!==o&&l(a,c,{get:()=>s[c],enumerable:!(n=p(s,c))||n.enumerable});return a};var y=(a,s,o)=>(o=a!=null?t(h(a)):{},i(s||!a||!a.__esModule?l(o,\"default\",{value:a,enumerable:!0}):o,a)),k=a=>i(l({},\"__esModule\",{value:!0}),a);var d=g((E,r)=>{r.exports=_jsx_runtime});var b={};N(b,{default:()=>x,frontmatter:()=>v});var e=y(d()),v={title:\"Python split() - Ejemplo de divisi\\xF3n de cadenas\",date:\"2022-06-19\",lastmod:\"2022-06-19\",tags:[\"python\",\"split\"],draft:!1,summary:\"El m\\xE9todo split() en Python divide los caracteres de una cadena en elementos separados en una lista.\",images:[\"/static/images/blog/styles-react.jpg\"],authors:[\"fabiankaraben\"]};function f(a={}){let{wrapper:s}=a.components||{};return s?(0,e.jsx)(s,Object.assign({},a,{children:(0,e.jsx)(o,{})})):o();function o(){let n=Object.assign({p:\"p\",img:\"img\",code:\"code\",h2:\"h2\",a:\"a\",span:\"span\",pre:\"pre\"},a.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{alt:\"tailwind-nextjs-banner\",src:\"/../static/images/blog/styles-react.jpg\"})}),(0,e.jsxs)(n.p,{children:[\"El m\\xE9todo \",(0,e.jsx)(n.code,{children:\"split()\"}),\" en Python divide los caracteres de una cadena en elementos separados en una lista.\"]}),(0,e.jsxs)(n.p,{children:[\"En este tutorial, repasaremos algunos ejemplos para ayudarte a aprender a usar el m\\xE9todo \",(0,e.jsx)(n.code,{children:\"split()\"}),\".\"]}),(0,e.jsxs)(n.p,{children:[\"Comenzaremos desde la sintaxis y luego veremos c\\xF3mo podemos modificar la lista devuelta usando los par\\xE1metros del m\\xE9todo \",(0,e.jsx)(n.code,{children:\"split()\"}),\".\"]}),(0,e.jsxs)(n.h2,{id:\"sintaxis-del-m\\xE9todo-split-en-python\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#sintaxis-del-m\\xE9todo-split-en-python\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Sintaxis del m\\xE9todo split() en Python\"]}),(0,e.jsxs)(n.p,{children:[\"El m\\xE9todo \",(0,e.jsx)(n.code,{children:\"split()\"}),\" toma dos par\\xE1metros. As\\xED es como se ve la sintaxis:\"]}),(0,e.jsx)(n.pre,{className:\"language-python\",children:(0,e.jsx)(n.code,{className:\"language-python code-highlight\",children:(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"str\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"split\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"separator\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" maxsplit\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]})})}),(0,e.jsxs)(n.p,{children:[\"Los par\\xE1metros anteriores son \",(0,e.jsx)(n.code,{children:\"separator\"}),\" y \",(0,e.jsx)(n.code,{children:\"maxsplit\"}),\". Ambos par\\xE1metros son opcionales, pero analicemos lo que hacen.\"]}),(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:\"separator\"}),\" especifica el car\\xE1cter en el que se produce la divisi\\xF3n. Si no se especifica, los espacios en blanco se utilizar\\xE1n como el car\\xE1cter predeterminado donde se produce la divisi\\xF3n. Comprender\\xE1s esto mejor en los ejemplos de las pr\\xF3ximas secciones.\"]}),(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:\"maxsplit\"}),\" especifica el n\\xFAmero m\\xE1ximo de divisiones. El valor predeterminado es \",(0,e.jsx)(n.code,{children:\"-1\"}),\", lo que permite un n\\xFAmero continuo de divisiones. Este argumento tambi\\xE9n es opcional.\"]}),(0,e.jsxs)(n.h2,{id:\"c\\xF3mo-usar-el-m\\xE9todo-split-sin-par\\xE1metros\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#c\\xF3mo-usar-el-m\\xE9todo-split-sin-par\\xE1metros\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"C\\xF3mo usar el m\\xE9todo split() sin par\\xE1metros\"]}),(0,e.jsxs)(n.p,{children:[\"En esta secci\\xF3n, veremos algunos ejemplos de divisi\\xF3n de cadenas usando el m\\xE9todo \",(0,e.jsx)(n.code,{children:\"split()\"}),\" sin pasar ning\\xFAn par\\xE1metro.\"]}),(0,e.jsx)(n.pre,{className:\"language-python\",children:(0,e.jsxs)(n.code,{className:\"language-python code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"myString \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:'\"Python es un lenguaje de programaci\\xF3n\"'}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"print\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"myString\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"split\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"# ['Python', 'es', 'un', 'lenguaje', 'de', 'programaci\\xF3n']\"}),`\n`]})]})}),(0,e.jsxs)(n.p,{children:[\"En el c\\xF3digo anterior, creamos una cadena llamada \",(0,e.jsx)(n.code,{children:\"myString\"}),' con cinco caracteres que componen la cadena: \"Python es un lenguaje de programaci\\xF3n\".']}),(0,e.jsxs)(n.p,{children:[\"Luego usamos el m\\xE9todo \",(0,e.jsx)(n.code,{children:\"split()\"}),\" en nuestra cadena usando la notaci\\xF3n de puntos.\"]}),(0,e.jsxs)(n.p,{children:[\"Cuando se imprim\\xEDa en la consola, cada car\\xE1cter de la cadena se convert\\xEDa en un elemento separado en un tipo de datos de lista: \",(0,e.jsx)(n.code,{children:\"['Python', 'es', 'un', 'lenguaje', 'de', 'programaci\\xF3n']\"}),\".\"]}),(0,e.jsxs)(n.p,{children:[\"El m\\xE9todo \",(0,e.jsx)(n.code,{children:\"split()\"}),\" puede separar cada palabra porque, de forma predeterminada, los espacios en blanco indican el punto de divisi\\xF3n de cada car\\xE1cter (consulta el par\\xE1metro \",(0,e.jsx)(n.code,{children:\"separator\"}),\" en la secci\\xF3n anterior).\"]}),(0,e.jsxs)(n.h2,{id:\"c\\xF3mo-usar-el-m\\xE9todo-split-con-par\\xE1metros\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#c\\xF3mo-usar-el-m\\xE9todo-split-con-par\\xE1metros\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"C\\xF3mo usar el m\\xE9todo split() con par\\xE1metros\"]}),(0,e.jsxs)(n.p,{children:[\"En esta secci\\xF3n, entenderemos c\\xF3mo usar los par\\xE1metros del m\\xE9todo \",(0,e.jsx)(n.code,{children:\"split()\"}),\" con ejemplos.\"]}),(0,e.jsx)(n.pre,{className:\"language-python\",children:(0,e.jsxs)(n.code,{className:\"language-python code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"myString \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:`\"Hello World!, if you're reading this, you're awesome\"`}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"print\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"myString\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"split\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\", \"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:`# ['Hello World!', \"if you're reading this\", \"you're awesome\"]`}),`\n`]})]})}),(0,e.jsxs)(n.p,{children:[\"En el ejemplo anterior, pasamos una coma (\",(0,e.jsx)(n.code,{children:\",\"}),\") como separador: \",(0,e.jsx)(n.code,{children:'myString.split(\", \")'}),\".\"]}),(0,e.jsxs)(n.p,{children:[\"Entonces, en lugar de dividir los caracteres despu\\xE9s de cada espacio en blanco, los caracteres solo se dividir\\xE1n cuando aparezca una coma: \",(0,e.jsx)(n.code,{children:`['Hello World!', \"if you're reading this\", \"you're awesome\"]`}),\". Esto significa que los caracteres que aparecen antes de una coma se agrupar\\xE1n.\"]}),(0,e.jsxs)(n.p,{children:[\"En el siguiente ejemplo, trabajaremos con el segundo par\\xE1metro: \",(0,e.jsx)(n.code,{children:\"maxsplit\"}),\".\"]}),(0,e.jsx)(n.pre,{className:\"language-python\",children:(0,e.jsxs)(n.code,{className:\"language-python code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"myString \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:`\"Hello World!, if you're reading this, you're awesome\"`}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"print\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"myString\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"split\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\", \"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"0\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:`# [\"Hello World!, if you're reading this, you're awesome\"]`}),`\n`]})]})}),(0,e.jsxs)(n.p,{children:[\"Hemos agregado un valor \",(0,e.jsx)(n.code,{children:\"maxsplit\"}),\" de \",(0,e.jsx)(n.code,{children:\"0\"}),\" en el c\\xF3digo anterior. Esto controla c\\xF3mo se divide la cadena. \",(0,e.jsx)(n.code,{children:\"0\"}),\" implica \",(0,e.jsx)(n.code,{children:\"1\"}),\", por lo que los caracteres se devuelven como un elemento en una lista: \",(0,e.jsx)(n.code,{children:`[\"Hello World!, if you're reading this, you're awesome\"]`})]}),(0,e.jsx)(n.p,{children:\"Cambiemos el n\\xFAmero y veamos qu\\xE9 pasa.\"}),(0,e.jsx)(n.pre,{className:\"language-python\",children:(0,e.jsxs)(n.code,{className:\"language-python code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"myString \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:`\"Hello World!, if you're reading this, you're awesome\"`}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"print\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"myString\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"split\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\", \"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:`# ['Hello World!', \"if you're reading this, you're awesome\"]`}),`\n`]})]})}),(0,e.jsxs)(n.p,{children:[\"Ahora que hemos cambiado el n\\xFAmero a \",(0,e.jsx)(n.code,{children:\"1\"}),\", los personajes se dividen en dos elementos en la lista: \",(0,e.jsx)(n.code,{children:\"'Hello World!'\"}),\" y \",(0,e.jsx)(n.code,{children:`\"if you're reading this, you're awesome\"`}),\".\"]}),(0,e.jsxs)(n.p,{children:[\"Si se omite el valor \",(0,e.jsx)(n.code,{children:\"maxsplit\"}),\", se establecer\\xE1 en \",(0,e.jsx)(n.code,{children:\"-1\"}),\" de forma predeterminada. Este valor negativo permite que los m\\xE9todos \",(0,e.jsx)(n.code,{children:\"split()\"}),\" dividan cada car\\xE1cter continuamente en elementos separados hasta que no queden m\\xE1s caracteres.\"]}),(0,e.jsxs)(n.p,{children:[\"Si hay un \",(0,e.jsx)(n.code,{children:\"separator\"}),\" espec\\xEDfico, la divisi\\xF3n se realizar\\xE1 con respecto a ese valor; de lo contrario, se utilizar\\xE1n espacios en blanco.\"]}),(0,e.jsxs)(n.h2,{id:\"conclusi\\xF3n\",children:[(0,e.jsx)(n.a,{\"aria-hidden\":\"true\",href:\"#conclusi\\xF3n\",tabIndex:\"-1\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Conclusi\\xF3n\"]}),(0,e.jsxs)(n.p,{children:[\"En este art\\xEDculo, hablamos sobre el m\\xE9todo \",(0,e.jsx)(n.code,{children:\"split()\"}),\" en Python que divide los caracteres en una cadena y los devuelve como elementos en una lista.\"]}),(0,e.jsxs)(n.p,{children:[\"Vimos la sintaxis del m\\xE9todo \",(0,e.jsx)(n.code,{children:\"split()\"}),\" y los dos par\\xE1metros proporcionados por defecto: los par\\xE1metros \",(0,e.jsx)(n.code,{children:\"separator\"}),\" y \",(0,e.jsx)(n.code,{children:\"maxsplit\"}),\".\"]}),(0,e.jsxs)(n.p,{children:[\"Tambi\\xE9n vimos algunos ejemplos divididos en dos secciones. La primera secci\\xF3n mostr\\xF3 c\\xF3mo usar el m\\xE9todo \",(0,e.jsx)(n.code,{children:\"split()\"}),\" sin par\\xE1metros, mientras que la segunda mostr\\xF3 c\\xF3mo usar\\xEDamos los par\\xE1metros del m\\xE9todo para lograr diferentes resultados.\"]})]})}}var x=f;return k(b);})();\n;return Component;"},"_id":"blog/python/string-split.mdx","_raw":{"sourceFilePath":"blog/python/string-split.mdx","sourceFileName":"string-split.mdx","sourceFileDir":"blog/python","contentType":"mdx","flattenedPath":"blog/python/string-split"},"type":"Blog","readingTime":{"text":"4 min read","minutes":3.325,"time":199500,"words":665},"slug":"python/string-split","toc":[{"value":"Sintaxis del método split() en Python","url":"#sintaxis-del-método-split-en-python","depth":2},{"value":"Cómo usar el método split() sin parámetros","url":"#cómo-usar-el-método-split-sin-parámetros","depth":2},{"value":"Cómo usar el método split() con parámetros","url":"#cómo-usar-el-método-split-con-parámetros","depth":2},{"value":"Conclusión","url":"#conclusión","depth":2}]},"authorDetails":[{"name":"Fabián Karaben","avatar":"/static/images/fab-avatar.png","occupation":"Traductor y creador de contenido","company":"Esdocu","email":"hola.esdocu@gmail.com","twitter":"https://twitter.com/fab_k_dev","linkedin":"https://www.linkedin.com/in/fabiankaraben/","github":"https://github.com/fabiankaraben","type":"Authors","readingTime":{"text":"1 min read","minutes":0.185,"time":11100,"words":37},"slug":"fabiankaraben","toc":[]}],"prev":{"title":"Python List insert() - Cómo agregar a una lista en Python","date":"2022-06-17T00:00:00.000Z","tags":["python","list"],"lastmod":"2022-06-17T00:00:00.000Z","draft":false,"summary":"En este artículo, veremos cómo crear una lista en Python. También veremos cómo agregar elementos a una lista.","images":["/static/images/blog/styles-react.jpg"],"authors":["fabiankaraben"],"type":"Blog","readingTime":{"text":"4 min read","minutes":3.435,"time":206100,"words":687},"slug":"python/how-to-add-to-a-list-in-python","toc":[{"value":"Cómo crear una lista en Python","url":"#cómo-crear-una-lista-en-python","depth":2},{"value":"¿Cómo se agrega un elemento a una lista en Python?","url":"#cómo-se-agrega-un-elemento-a-una-lista-en-python","depth":2},{"value":"Cómo agregar un elemento a una lista usando el método insert()","url":"#cómo-agregar-un-elemento-a-una-lista-usando-el-método-insert","depth":3},{"value":"Cómo agregar un elemento a una lista usando el método append()","url":"#cómo-agregar-un-elemento-a-una-lista-usando-el-método-append","depth":3},{"value":"Cómo agregar un elemento a una lista usando el método extend()","url":"#cómo-agregar-un-elemento-a-una-lista-usando-el-método-extend","depth":3},{"value":"Cómo agregar una lista a una lista usando el método extend()","url":"#cómo-agregar-una-lista-a-una-lista-usando-el-método-extend","depth":3},{"value":"Cómo agregar una tupla a una lista usando el método extend()","url":"#cómo-agregar-una-tupla-a-una-lista-usando-el-método-extend","depth":3},{"value":"Conclusión","url":"#conclusión","depth":2}]},"next":{"title":"Formateadores %.2f y %d en Python","date":"2022-06-20T00:00:00.000Z","tags":["python"],"lastmod":"2022-06-20T00:00:00.000Z","draft":false,"summary":"En Python, existen varios métodos para formatear tipos de datos. El formateador `%f` se usa específicamente para formatear valores flotantes.","images":["/static/images/blog/styles-react.jpg"],"authors":["fabiankaraben"],"type":"Blog","readingTime":{"text":"3 min read","minutes":2.26,"time":135600,"words":452},"slug":"python/formateadores-f-y-d","toc":[{"value":"Cómo usar el formateador %f en Python","url":"#cómo-usar-el-formateador-f-en-python","depth":2},{"value":"Cómo usar el formateador %d en Python","url":"#cómo-usar-el-formateador-d-en-python","depth":2},{"value":"Resumen","url":"#resumen","depth":2}]}},"__N_SSG":true}